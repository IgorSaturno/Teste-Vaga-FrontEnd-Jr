$breakpoints: (
  mobile: 480px,
  tablet: 768px,
  desktop: 1024px,
  large: 1440px,
);

@mixin respond-to($breakpoint) {
  @if $breakpoint == mobile {
    @media (min-width: 480px) {
      @content;
    }
  } @else if $breakpoint == tablet {
    @media (min-width: 768px) {
      @content;
    }
  } @else if $breakpoint == desktop {
    @media (min-width: 1024px) {
      @content;
    }
  } @else if $breakpoint == large {
    @media (min-width: 1440px) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' não encontrado.";
  }
}

@mixin respond-to-max($breakpoint) {
  @if $breakpoint == mobile {
    @media (max-width: 479px) {
      @content;
    }
  } @else if $breakpoint == tablet {
    @media (max-width: 767px) {
      @content;
    }
  } @else if $breakpoint == desktop {
    @media (max-width: 1023px) {
      @content;
    }
  } @else if $breakpoint == large {
    @media (max-width: 1439px) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' não encontrado.";
  }
}

@mixin respond-to-between($min-breakpoint, $max-breakpoint) {
  @if $min-breakpoint == mobile and $max-breakpoint == tablet {
    @media (min-width: 480px) and (max-width: 767px) {
      @content;
    }
  } @else if $min-breakpoint == tablet and $max-breakpoint == desktop {
    @media (min-width: 768px) and (max-width: 1023px) {
      @content;
    }
  } @else if $min-breakpoint == desktop and $max-breakpoint == large {
    @media (min-width: 1024px) and (max-width: 1439px) {
      @content;
    }
  } @else {
    @warn "Range de breakpoints '#{$min-breakpoint}' - '#{$max-breakpoint}' não suportado.";
  }
}

@mixin container($max-width: 1440px) {
  width: 100%;
  max-width: $max-width;
  margin: 0 auto;
  padding: 0 1rem;

  @include respond-to(tablet) {
    padding: 0 2rem;
  }

  @include respond-to(desktop) {
    padding: 0 2.5rem;
  }
}

@mixin flex-responsive($direction: row, $mobile-direction: column) {
  display: flex;
  flex-direction: $mobile-direction;

  @include respond-to(tablet) {
    flex-direction: $direction;
  }
}

@mixin grid-responsive(
  $columns: 1,
  $tablet-columns: 2,
  $desktop-columns: 3,
  $gap: 1rem
) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;

  @include respond-to(tablet) {
    grid-template-columns: repeat($tablet-columns, 1fr);
  }

  @include respond-to(desktop) {
    grid-template-columns: repeat($desktop-columns, 1fr);
  }
}

@mixin font-responsive(
  $mobile-size: 1rem,
  $tablet-size: 1.125rem,
  $desktop-size: 1.25rem
) {
  font-size: $mobile-size;

  @include respond-to(tablet) {
    font-size: $tablet-size;
  }

  @include respond-to(desktop) {
    font-size: $desktop-size;
  }
}

@mixin spacing-responsive($mobile: 1rem, $tablet: 1.5rem, $desktop: 2rem) {
  margin: $mobile 0;

  @include respond-to(tablet) {
    margin: $tablet 0;
  }

  @include respond-to(desktop) {
    margin: $desktop 0;
  }
}

@mixin transition($property: all, $duration: 0.3s, $timing: ease) {
  transition: $property $duration $timing;
}

@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: none;
  border-radius: 0.5rem;
  font-weight: 600;
  text-decoration: none;
  cursor: pointer;
  @include transition();

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
}

@mixin card-base {
  background: white;
  border-radius: 0.5rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  @include transition(box-shadow);

  &:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
}
